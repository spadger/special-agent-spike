version: '2.1'

services:

  app1:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      ID: app1
      SOURCE: topic-a
      DEST: topic-b
    volumes:
    - ./agent/agent1.props:/opt/application/agent/agent.props

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      ID: app2
      SOURCE: topic-b
      DEST: topic-c
    volumes:
      - ./agent/agent2.props:/opt/application/agent/agent.props


  kafka:
    image: packages.dns.ad.zopa.com:5000/confluentinc/cp-kafka:5.5.1
    depends_on:
      - zookeeper
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_JMX_PORT: 9585
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9585"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      #KAFKA_LOG4J_LOGGERS: "kafka.coordinator.group.GroupMetadataManager=ERROR,kafka.cluster.Partition=ERROR,kafka.controller=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,state.change.logger=ERROR"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_NUM_PARTITIONS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=WARN,state.change.logger=WARN,kafka.log.LogCleaner=WARN,kafka=WARN"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "ERROR"

    volumes:
      - ./data/kafka:/var/lib/kafka/data:delegated

  zookeeper:
    image: packages.dns.ad.zopa.com:5000/confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_JMX_PORT: 9585
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9585"
    volumes:
      - ./data/zookeeper/data:/var/lib/zookeeper/data:delegated
      - ./data/zookeeper/logs:/var/lib/zookeeper/log:delegated

  lenses:
    image: landoop/lenses:2.3.7
    depends_on:
      - kafka
    environment:
      LENSES_PORT: 9991
      LENSES_KAFKA_BROKERS: PLAINTEXT://kafka:9092
      LENSES_ZOOKEEPER_HOSTS: |
        [
          {url:"zookeeper:2181", jmx:"zookeeper:9585"}
        ]

      LENSES_SECURITY_MODE: BASIC
      # Secrets can also be passed as files. Check _examples/
      LENSES_SECURITY_GROUPS: |
        [
          {"name": "adminGroup", "roles": ["admin", "write", "read", "TableStorageWrite" ]},
          {"name": "readGroup",  "roles": ["read", "TableStorageWrite" ]}
        ]
      LENSES_SECURITY_USERS: |
        [
          {"username": "admin", "password": "admin", "displayname": "Lenses Admin", "groups": ["adminGroup"]},
          {"username": "read", "password": "read", "displayname": "Read Only", "groups": ["readGroup"]}
        ]
      LENSES_KAFKA_SETTINGS_CONSUMER_SECURITY_PROTOCOl: PLAINTEXT
      LENSES_KAFKA_SETTINGS_PRODUCER_SECURITY_PROTOCOL: PLAINTEXT
      LENSES_KAFKA_SETTINGS_KSTREAM_SECURITY_PROTOCOL: PLAINTEXT

    ports:
      - 9991:9991
    volumes:
      - ./license.json:/license.json:delegated

  jaeger:
    image: jaegertracing/all-in-one:1.18.0
    ports:
      - "6831:6831/udp"
      - "16686:16686"

